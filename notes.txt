Lesson 1-9
Intro...

Lesson 10
Docker options for Windows

Lesson 11
Docker Windows setup

Lesson 12
Docker Windows 7,8, 10 Home setup

Lesson 13
Docker Mac
Don't use homebrew to install docker 
Checkout terminal completion for docker.

Lesson 14
Docker Linux
Better to install by following instructions from docker website.
Don't use pre-install setups (install docker manually)
Don't use 'apt' to install docker, it might be too old version
`get.docker.com` - script to install docker
adding yourself to a docker group (remove sudo for every command) can be potential security issue.
docker-machine - needs to be installed manually
docker-compose - need to be installed manually

Lesson 15
- - - 

Lesson 16
- - - 

Lesson 17
- - - 

Lesson 18
`docker version` - Display info about client and server versions (check client/server status)
`docker info` - Display system-wide information

Lesson 19
Image - binaries and libs and source code that makes up an application
Container - running instance of am image
Registry is like github for docker
`docker container run --publish` `-p` - set port
`docker container run --detach` `-d` - run in a background
`docker ls` - see list of containers
`docker ls -a` - see list of containers including stopped
`docker stop` - stop a container by id
Container name must be unique
`docker container run --name` - give container a name
`docker logs` - see logs of a container
`docker logs -f` - tail logs
`docker container top` - list of processes in the container
`docker stats` - Display a live stream of container(s) resource usage statistics
`docker container rm` - removes a container
`docker container rm -f` - remove container even if it is running (stops it first)

Lesson 20
When running `docker container run`:
1. Looks in local cache for an image
2. Looks in remove repository (defaults to docker hub)
3. Downloads an image in found and stores it in local cache
4. Creates a new container of that image (starts a new layer of changes on top)
5. Give a virtual IP on private network in docker
6. Opens a port if specified
7. Start using a command specified (like entrypoint?)

Lesson 21
Containers are not mini virtual machines. They are restricted processes.
* They are processes
* Limited to what resources they can access
* Exit when process stops

Lesson 22
- - -

Lesson 23
Assignment - Running basic containers
--env -e - environment variables

Lesson 24
Assignment - Running basic containers

Lesson 25
docker container top - process list in one container
docker container inspect - details of one container config
docker container stats - performance stats for all containers

Lesson 26
docker container run -it - start a new container interactively
docker container exec -it - run addition command in existing container
docker container -ai - similar at '-it' but for start command
-i, --interactive          Keep STDIN open even if not attached (allows connection running)
-t, --tty                  Allocate a pseudo-TTY ("fake" terminal)

Lesson 27
docker container port - quick ports check
every container connect to bridge network by default
each of those networks routes out through NAT firewall (docker deamon) so your container can talk to
the internet
container can talk to each other inside same network without opening any extra ports
'--net=host' - skip virtual networks and use host IP
docker container inspect --format - filter output format eg. {{ .NetworkSetting.IPAddress }}

Lesson 28
- - -

Lesson 29
docker network ls
docker network inspect
docker network create --driver
docker network connect - attach a network to a container
docker network disconnect - detach a network from a container

Lesson 30
DNS
Docker uses container names as host names (only for custom networks)
default 'bridged' network does not have DNS by default
docker compose makes it easier in 'bridged' network too

Lesson 31
Assigment

Lesson 32
Assigment
--rm - cleans up a container after exiting

Lesson 33
- - -

Lesson 34
DNS Round Robin Test - make sure that multiple servers (containers) can respond for the same dns name
(poor man load balancer lol)
--network-alias or --net-alias to assign an alias to a container
--net= to assign to a network on container startup

Lesson 35
- - -

Lesson 36
- - -

Lesson 37
Dockerhub
docker image ls
docker image push
docker image pull
docker rmi

Lesson 38
docker image history - history about an image layers
docker image inspect - meta data

Lesson 39
Image tags
docker image tag - create a new tag for an image
docker login
docker logout
Docker login stores a token (potential security issie)

Lesson 40
-f can be provided for a file
Dockerfile
ENV - to set environment variables
RUN - runs a command
All logs can be spit to /dev/stdout and /dev/stderr so docker can capture them
EXPOSE - to open ports
CMD - final command that runs every time new container run starts or every time restarts stopped container

Lesson 41
docker image build - to build an image using dockerfile
keep things that changes the least in the beginning and things that changes the most in the end
copy stuff at the end so it build faster

Lesson 42
COPY - to copy files over to a container
WORKDIR - to change directory (same as RUN cd ...)


Lesson 43
Assignment

Lesson 44
Assignment
&& - chains commands. fails if any command fails
; - dont care is first command failed and keeps executing next
Final CSM command should have this syntax - CMD ["/sbin/tini", "--" ,"node", "./bin/www"]

Lesson 45
docker image prune (-a) - to cleanup images
docker system prune - to cleanup everything
docker system df - to see space usage
docker network prune - to cleanup networks

Lesson 46
- - -

Lesson 47
Persistent data: Volumes
Volume is a unique location on a host which is getting mounter to a container
(in Mac and win it is in virtual machine)
docker volume ls - see all volumes
docker container run -v - to create or link a named volume eg. `mysql-db:/var/lib/mysql`
docker volume create - to create a volume (can specify a driver)

Lesson 48
$(pwd) - useful command to use in a command where directory unknown

Lesson 49
Persistent data: Bind mounting
A mapping between host file directories in to container file directories
Does not overwrite a data in container. If you run a container again without mounting you will see
the data that was there before.

Lesson 50
Assignment

Lesson 51
Assignment

Lesson 52
Assigment

Lesson 53
Assigment
Jekyll - check it out! website generator

Lesson 54
- - -

Lesson 55
Docker Compose
Configures relationship between containers

Lesson 56
docker-compose up (-d)  - start stuff
docker-compose down     - stop stuff
docker-compose logs     - logs
docker-compose ps       - list of containers
docker-compose top      - list of processes

Lesson 57
Assignment (Drupal and Postgress)

Lesson 58
Assignment (Drupal and Postgress)
Named volumes needs to be defined in volumes section
docker-compose down -v  - to remove volumes

Lesson 59
docker-compose build - to build
(nginx proxy)
build section can have reference to dockerfile
docker-compose down rmi - removes images that was build during 'up'

Lesson 60
Assignment

Lesson 61
'rm --rf /var/lib/apt/lists/*' - to cleanup after apt install
git --branch --single-branch --depth - to only download latest copy and only one branch (saves time)
docker always runs thnigs as root be default
'chown -R www-data:www-data' - example of changing ownership of the files (it is okay to use it that way)


Lesson 62
Swarm Mode - server clustering solution
Re-watch? (Intro)

Lesson 63
docker swarm init - initialize docker swarm
RAFT - protocol insures consistency
can be only one leader at a time among managers
docker node ls -
docker swarm -
docker service -
docker service create -
docker service ps
docker service ls
docker service update <service name> --replicas - to update to multiple containers
docker service logs

Lesson 64
- - -

Lesson 65
- - -

Lesson 66
Docker swarm example

Lesson 67
Overlay multi-host networking - swarm-wide bridge network (containers can access each other like they
are on the vlan)
IPSec (AES) encryption can be used in the network. It is off by default.
Service can be added to one or more networks

Lesson 68
Routing Mesh - routes incoming packets for the Service to a proper task(containers)
Load balancer
Swarm puts VIP in front of each service. This is to ensure that the work in is correctly
distributed across all tasks(containers). Inner and outer connections are going through VIP
and not directly task to task.
Stateless load balancer (eg. does not saves session cookies)
Layer 3(TCP), not Layer 4 (DNS)
Nginx or HAProxy - can be used to make it stateful, Layer 4 load balancer.
Not supported persistent connections (eg web sockets) !!! need to use proxy

Lesson 69
Assignment

Lesson 70
docker service volume is different to normal way of creating a volume
--mount type=volume,source=db-data,target=/var/lib/postgress/data - example

Lesson 71
Stacks - nodes, services, tasks, containers, networks and volumes (only one swarm)
docker stack deploy -
uses compose file (at least version 3)
Stacks has a visualiser - pretty cool little tool


Lesson 72
Secret Storage - secure solution to store secrets
Only stored on manager node
In memory only for services that uses them. and looks like a regular file (but it is not)
Swarm only thing

Lesson 73
Docker Secret
docker secret create <name> <file>
`echo "<secret>" | docker secret create <name> -` - without a file
docker secrets ls
docker secret inspect <name>
/run/secrets/<name> - location of secrets
docker service update --secret-rm (--secret-add) - to remove or add (recreates a container)

Lesson 74
Stack and Secrets (compose file must be at least 3.1)

Lesson 75
Assignment

Lesson 76
Assignment

Lesson 77
Same compose file can be used for dev and prod (for secrets and not only)
Secrets get mounted into container in dev and this is not secure (prod works different)

Lesson 78
Docker compose can be used for:
    local
    CI
    prod
docker-compose.override.yml - overrider a file 'docker-compose.yml' which can be used as base
Docker-compose can accept (-f) multiple file (order matters, base must be first)
docker-compose config - to combine files
docker-compose extends - similar to config?

Lesson 79
docker service update - updates all one by one (blue/green)
docker service scale <> -
docker service rollback <> -

Lesson 80
Healthcheck - basic level of health
executes inside a container (eg. curl localhost to do a basic check for web servcer)
expects 0 (OK) or 1 (Error)
starting/healthy/unhealthy
docker run --health-cmd="curl -f localhost || false" - and more --health-... options (|| false important)
|| false and exit 1 - same thing
php-fpm and nginx - has default health checks api
can be used in compose file too

Lesson 81
- - -

Lesson 82
docker hub

Lesson 83
Docker registry
--registry-mirror - enables local cache proxy images (offile dockerhub)

Lesson 84
local registry example

Lesson 85
Assignment

Lesson 86
Private docker registry searvice with swarm example
/v2/_catalog - to see registeries

Lesson 87
- - -

Lesson 88
Good talk about docker.

Lesson 89
Talk about Swarm future
will swarm survive in long term?

Lesson 90
Talk about swarm and some examples

Lesson 91
Into Kubernetes

Lesson 92
What is Kubernetes
Created by Google
Can run other container runtimes like containerD
Has many vendors (distributions)

Lesson 93
Why kubernetes
If apps changing often = consider orchestration
Use vendor product instead of neat kubernetes solution

Lesson 94
Kubernetes vs swarm
Swarm:
    Comes with docker
    Swarm is easier to deploy and manage
    Kinda 80/20 - 20& features of K8s that solves 80% of requirements
    RUns anywhere: ARM, Win, 32 & 64 bit, local, cloud, datacenter
    Secure by default: TLS, encrypts db and etc.
    Easier to troubleshoot
    Good to small teams and small projects
Kubernetes:
    Clouds will deploy/manage Kubernetes
    Widest adoption and community
    Flexible: covers wider set of use cases
    Vendor support K8s
    "No one ever got fired for buying IBM" - trusted, popular thing
    Trendy

Lesson 95
K8s intro

Lesson 96
Intro to K8s - diagram, how it is diffirent to swarm

Lesson 97
K8s - Hungry on resources

Lesson 98
read

Lesson 99
Pod: one or more containers runnit together
Controller: create/update pods
Service: network endpoint to connect to a pod. (persistent endpoint for pod in a cluster)
Namespace: filter group of objects in cluster

Lesson 100
- - -

Lesson 101
Example of running a pod

Lesson 102
Must read

Lesson 103
kubectl - mail kubernetes command
kubectl run - similar to docker run
kubectl scale - to increase number of replicas
kubectl get all - see all containers (including management) in k8s

Lesson 104
kubectl get pods - see all pods(containers?)..
kubectl logs - to see logs
kubectl logs -l - to specify a label
kubectl describe pod/<pod name> - info about pod
kubectl get pogs -w - like watch command
kubrctl delete pod/<podname> - removed a pod

Lesson 105
Intro

Lesson 106
kubectl expose - to expose ports
service in k8s - is a stable address for pods
you need core dns
*Important info about network in k8s*

Lesson 107
example on service

Lesson 108
--port to expose a port inside k8s (local machine port will be random)

Lesson 109
about full hostnames of a service

Lesson 110
intro

Lesson 111
--dry-run -o yml - to generate a template

Lesson 112
kubectl run - to creeate a pod
kubectl create/deploy - to create a deployment

Lesson 113
about imperative vs declarative processes (cli vs yml file)

Lesson 114
again cli vs yml file (yml better in prod)

Lesson 115
Intro

Lesson 116
kubectl apply -f - to use yml instead of raw command line
You can use firectory instead of a file
You can use even a link (http://example.com/prod.yml)

Lesson 117
Manifest - full description of a resource
Manifest has requirements
4 root keys:
    apiVersion
    kind
    metadata
    spec

Lesson 118
api-version
api-resource

Lesson 119
kubectl explain <name> --recursive
kubectl example <name>.spec

Lesson 120
--server-dry-run - similer to dry run but runs on a server rather than on a client
kubectl diff -f <file>

Lesson 121
Labels intro

Lesson 121
CSI - container storage interface

Lesson 122
Intro

Lesson 123
storage in k8s
start simple
might be better to use outside of a cluster

Lesson 124
Ingress
try nginx or traefik

Lesson 125
CRD's and Operator pattern

Lesson 126
Heml - check it out.
compose on k8s - You can deploy stack to k8s instead of swarm

Lesson 127
K8s dashboard

Lesson 128
Namespase - virtual cluster/view
Deviding real cluster into virtual cluster, kinda.

Lesson 129
ServiceMesh - vendor for microservises?

Lesson 130
Intro

Lesson 131
Cernel namespases - a way to limit process view and access (linux)
Cgroups - a way to limit process resources (linux)

Lesson 132
dont run random shit ob your docker, check it first at least. (obvious)

Lesson 133
Docker bench security - configuration checker for security and etc.

Lesson 134
Don't run apps as root inside a container.
Create a user:group for your app.

Lesson 135
Enable user namespases - per host setting
https://github.com/BretFisher/ama/issues/17
1. Just use Docker - default settings
2. Scan your hosts for proper Docker config
3. Don't expose the Docker TCP Socket to the internet
4. Don't run apps in containers as root
5. App and OS dependency scanning
6. Use slimmed down base images
7. Use multi stage images to prevent dec and CI dependencies in prod
8. Enable user namespases
9. Runtime bad behavior monitoring
10. Content trust (?)
11. Later, check out AppArmor, SELinux., Seccomp and Linux capabilities
12. Docker root-less

Lesson 136
Snyk - scans repo for vulnerabilities.

Lesson 137
sysdig falco - monitors for any bad behavior

Lesson 138
docker root-less - kinds useless in prod i think

Lesson 139
Win specific vulnerabilities.









